    upstream backend {
        server api:3000;
    }

    upstream frontend {
        server front:9090;
    }

    server {
        listen 80;
        server_name testsite.fr;

        location /sockjs-node {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
            proxy_pass http://frontend; 
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name testsite.fr;

    location / {
        proxy_pass http://frontend/;
    }

    location /api/ {
            rewrite /api/(.*) /$1 break;
		    proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://backend/;
            #set request header
            proxy_set_header X-Acteur-Id "12456";

            #set response header
            add_header X-Tarlouz-Id "00001";
    }

    error_log /etc/nginx/logs/errors.log;
    access_log /etc/nginx/logs/access.log;

    ssl_certificate /etc/nginx/certificates/testsite.fr.crt;
    ssl_certificate_key /etc/nginx/certificates/testsite.fr.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    #ssl_dhparam /path/to/dhparam;

    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # OCSP stapling
    ssl_stapling off;
    ssl_stapling_verify off;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

    # replace with the IP address of your resolver
    resolver 127.0.0.1;
}

# Force HTTPS
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    return 301 https://$host$request_uri;
}